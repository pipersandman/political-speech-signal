name: build-and-deploy

on:
  workflow_dispatch:
    inputs:
      force:
        description: "Run now (ignore Los Angeles time gate)"
        required: false
        type: boolean
  schedule:
    # Noon PT (cover PDT/PST with adjacent UTC hours)
    - cron: "0 19 * * *"
    - cron: "0 20 * * *"
    # 10 PM PT (next-day UTC; cover PDT/PST)
    - cron: "0 5 * * *"
    - cron: "0 6 * * *"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.decide.outputs.ok }}
    env:
      TRUTH_REPO: https://github.com/stiles/trump-truth-social-archive.git
      CACHE_BUST: ${{ github.sha }}
      SNAP_MAX: "200"
      NLTK_DATA: ${{ github.workspace }}/.nltk_data
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Decide if we should run (LA time or manual)
        id: decide
        env:
          TZ: America/Los_Angeles
          FORCE_RUN: ${{ github.event.inputs.force }}
        run: |
          # Manual or forced runs bypass the gate
          if [ "${{ github.event_name }}" != "schedule" ] || [ "${FORCE_RUN}" = "true" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Scheduled: only at 12:00 or 22:00 LA time
          now_hour=$(date +%H)
          if [ "$now_hour" = "12" ] || [ "$now_hour" = "22" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Outside scheduled LA hours; skipping build."
          fi

      - name: Prepare NLTK dir
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: mkdir -p "$NLTK_DATA"

      - name: Cache NLTK data
        if: ${{ steps.decide.outputs.ok == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.NLTK_DATA }}
          key: nltk-${{ runner.os }}-v1

      - name: Install deps
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: |
          pip install "pandas>=2.2" "pyarrow>=16" "duckdb>=1.0" "nltk>=3.9" "spacy>=3.7"
          python -m spacy download en_core_web_sm
          python - << 'PY'
          import os, nltk
          p = os.environ.get('NLTK_DATA','')
          if p: nltk.data.path.append(p)
          nltk.download('vader_lexicon', download_dir=p or None)
          nltk.download('stopwords',     download_dir=p or None)
          PY

      - name: Normalize â†’ snapshot.json
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: python scripts/normalize_truth.py

      - name: Normalize to Parquet (+ trends)
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: python scripts/normalize_to_parquet.py

      - name: NLP analysis â†’ nlp.json
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: python scripts/nlp_analyze.py

      - name: Entities â†’ entities.json
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: python scripts/entities_extract.py

      - name: Build site (inventory + snapshot + NLP + entities)
        if: ${{ steps.decide.outputs.ok == 'true' }}
        run: python scripts/inventory_truth.py

      - name: Upload Pages artifact
        if: ${{ steps.decide.outputs.ok == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    if: ${{ needs.build.outputs.ok == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Telegram (optional)
        if: ${{ env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != '' }}
        run: |
          PAGE_URL="${{ steps.deployment.outputs.page_url }}"
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            --data-urlencode text="ðŸ“£ Report published: ${PAGE_URL}"
