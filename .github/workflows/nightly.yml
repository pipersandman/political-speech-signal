name: build-and-deploy

on:
  workflow_dispatch:
  schedule:
    # Noon PT (PDT=19:00 UTC, PST=20:00 UTC)
    - cron: "0 19 * * *"
    - cron: "0 20 * * *"
    # 10 PM PT (PDT=05:00 UTC next day, PST=06:00 UTC next day)
    - cron: "0 5 * * *"
    - cron: "0 6 * * *"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TRUTH_REPO: https://github.com/stiles/trump-truth-social-archive.git
      CACHE_BUST: ${{ github.sha }}
      SNAP_MAX: "200"
      # use a workspace-local dir for NLTK so caching works cross-runs
      NLTK_DATA: ${{ github.workspace }}/.nltk_data
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Gate: only proceed when local LA hour is 12 or 22 (handles DST)
      - name: Gate by Los Angeles hour
        id: tzcheck
        env:
          TZ: America/Los_Angeles
        run: |
          now_hour=$(date +%H)
          echo "Local hour (America/Los_Angeles): $now_hour"
          if [ "$now_hour" = "12" ] || [ "$now_hour" = "22" ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare NLTK dir
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: mkdir -p "$NLTK_DATA"

      - name: Cache NLTK data
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.NLTK_DATA }}
          key: nltk-${{ runner.os }}-v1

      - name: Install deps
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: |
          pip install "pandas>=2.2" "pyarrow>=16" "duckdb>=1.0" "nltk>=3.9"
          python - << 'PY'
          import os, nltk
          nltk.data.path.append(os.environ['NLTK_DATA'])
          nltk.download('vader_lexicon', download_dir=os.environ['NLTK_DATA'])
          nltk.download('stopwords',     download_dir=os.environ['NLTK_DATA'])
          PY

      - name: Normalize â†’ snapshot.json
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: python scripts/normalize_truth.py

      - name: Normalize to Parquet (+ trends)
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: python scripts/normalize_to_parquet.py

      - name: NLP analysis â†’ nlp.json
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: python scripts/nlp_analyze.py

      - name: Build site (inventory + snapshot + NLP)
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        run: python scripts/inventory_truth.py

      - name: Upload Pages artifact
        if: ${{ steps.tzcheck.outputs.ok == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Telegram (optional)
        if: ${{ env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != '' }}
        run: |
          PAGE_URL="${{ steps.deployment.outputs.page_url }}"
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            --data-urlencode text="ðŸ“£ Report published: ${PAGE_URL}"
