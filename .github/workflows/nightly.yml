name: nightly-report

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"  # 03:00 UTC â‰ˆ 20:00 PT

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TRUTH_REPO: https://github.com/stiles/trump-truth-social-archive.git
      CACHE_BUST: ${{ github.sha }}
      SNAP_MAX: "200"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache NLTK data
        uses: actions/cache@v4
        with:
          path: ~/.cache/nltk
          key: nltk-${{ runner.os }}-v1


      - name: Install deps for normalization + NLP
        run: |
          pip install "pandas>=2.2" "pyarrow>=16" "duckdb>=1.0" "nltk>=3.9"
          python - << 'PY'
          import nltk
          nltk.download('vader_lexicon')
          nltk.download('stopwords')
          PY

      - name: Normalize upstream â†’ snapshot.json
        run: python scripts/normalize_truth.py

      - name: Normalize to Parquet (+ trends)
        run: python scripts/normalize_to_parquet.py

      - name: NLP analysis â†’ nlp.json
        run: python scripts/nlp_analyze.py

      - name: Upload Parquet artifact (kept off-repo)
        uses: actions/upload-artifact@v4
        with:
          name: parquet-${{ github.run_id }}
          path: data/processed/*.parquet
          retention-days: 7

      - name: Build site (inventory + snapshot + NLP)
        run: python scripts/inventory_truth.py

      - name: QA: check artifacts
        run: python scripts/check_artifacts.py

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site


  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
      TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Telegram (optional)
        if: ${{ env.TG_BOT_TOKEN != '' && env.TG_CHAT_ID != '' }}
        run: |
          text="ðŸ“£ Inventory + snapshot published: ${{ steps.deployment.outputs.page_url }}"
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            -d text="$text"
